{"ast":null,"code":"var _jsxFileName = \"/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/Auction.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Web3Modal from \"web3modal\";\nimport { ethers, Contract, providers, Signer } from 'ethers';\nimport { AUCTION_ESCROW_CONTRACT_ADDRESS, AUCTION_ESCROW_ABI } from './constant';\nimport moment from 'moment';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Auction() {\n  _s();\n  // const formatetime = moment(time).unix\n\n  const [title, setTitle] = useState();\n  const [clientAddress, setClientAddress] = useState();\n  const [everyAuction, setEveryAuction] = useState([]);\n  const [StartAuction, setStartAuction] = useState();\n  const [auctionEndTime, setAuctionEndTime] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [auctionId, setAuctionId] = useState();\n  const [loading, setLoading] = useState(false);\n  const [msp, setMsp] = useState(0);\n  const [totalNumOfAuctions, setTotalNumOfAuctions] = useState(0);\n  const web3ModalRef = useRef();\n  const [walletConnected, setWalletConnected] = useState(false);\n  const getProviderOrSigner = async function () {\n    let needSigner = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const provider = await web3ModalRef.current.connect();\n    const web3Provider = new providers.Web3Provider(provider);\n    // console.log((await userAddress).toLowerCase())\n    const signerForUserAddress = await web3Provider.getSigner();\n    const clientAddress = await signerForUserAddress.getAddress();\n    setClientAddress(clientAddress);\n    const {\n      chainId\n    } = await web3Provider.getNetwork();\n    if (chainId !== 5) {\n      window.alert(\"Please switch to the Goerli network!\");\n      throw new Error(\"Please switch to the Goerli network\");\n    }\n    if (needSigner) {\n      const signer = web3Provider.getSigner();\n      return signer;\n    }\n    return web3Provider;\n  };\n  // console.log('clientAddress:', clientAddress,); \n  const connectWallet = async () => {\n    try {\n      await getProviderOrSigner();\n      setWalletConnected(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Create Auction --------\n  const createAuction = async () => {\n    // Validate inputs\n    if (clientAddress == null || title == null || msp == null) {\n      alert('Please enter all required fields.');\n      return;\n    }\n    const signer = await getProviderOrSigner(true);\n    const escroContract = getAuctionContractInstance(signer);\n    console.log('clientAddress:', clientAddress);\n    // Send the transaction to create the escrow agreement\n    const tx = await escroContract.createAuctionContract(clientAddress, title, {\n      value: ethers.utils.parseEther(msp)\n    });\n    console.log('tx====', tx);\n    setLoading(true);\n    await tx.wait();\n    // setAuctionId('');\n    setMsp(0);\n    // Update the state to reflect the new escrow agreement\n    // setFundsReleased(false);\n\n    // getNumOfAgreements();\n    setLoading(false);\n    alert('Auction  created successfully.');\n    alert('MSP  deposited successfully.');\n  };\n\n  // This is second function for StartAuction(StartTime)\n  async function handleSubmit(id) {\n    console.log('id-----', id);\n    // alert('function called handlesubmit')\n    // e.preventDefault();\n    try {\n      const signer = await getProviderOrSigner(true);\n      const escroContract = getAuctionContractInstance(signer);\n      // let auction = await escroContract.auctions(id);\n      // console.log('==auction===', auction);\n      // const actn = new ParsedAgreement(id, auction.starttime);\n      // console.log('actn===', actn);\n\n      console.log('escroContract===', escroContract);\n      const tx = await escroContract.startAuction(auctionId, auctionEndTime);\n      console.log(`Transaction hash: ${tx.hash}`);\n      // return actn;\n    } catch (err) {\n      console.error(err, '--------------------');\n    }\n  }\n  const startAuction = async () => {\n    // console.log(id, '--id');\n    const signer = await getProviderOrSigner(true);\n\n    // async function handleStartAuction() {\n    //         try {\n    //             const tx = await contract.startAuction(auctionId, auctionEndTime);\n    //             await tx.wait();\n    //             setStatus('Auction started successfully');\n    //         } catch (err) {\n    //             setStatus('Error starting auction: ' + err.message);\n    //         }\n    //     }\n\n    const provider = await getProviderOrSigner();\n    const escroContract = getAuctionContractInstance(signer);\n    // Get the current block timestamp\n    const blockTimestamp = await provider.getBlockNumber(auctionId);\n    setTimeout(blockTimestamp);\n    console.log('blockTimestamp=>', blockTimestamp);\n    // const formatetime = moment(blockTimestamp).unix()\n    // console.log('formatetime::::',formatetime);\n\n    // Check if the user is the owner of the auction\n    // const owner = await contract.functions.auctions(auctionId).owner();\n    if (clientAddress !== signer.address) {\n      setError(\"You are not the owner of this auction\");\n      return;\n    }\n    // Check if the auction end time is valid\n    if (auctionEndTime <= blockTimestamp) {\n      setError(\"Invalid end time\");\n      return;\n    }\n    const tx = await escroContract.startAuction(auctionId, auctionEndTime);\n    setLoading(true);\n    console.log('tx', tx);\n    await tx.wait();\n    // setStartAuction()\n    setLoading(false);\n    setAuctionEndTime(\"\");\n    alert('Auction started...!!');\n\n    // let agreement = await escroContract.startAuction();\n    // setStartAuction(agreement.toNumber())\n    // console.log(agreement, 'num of auction');\n  };\n\n  function ParsedAgreement(agreeId, owner, title, msp, starttime, endtime) {\n    this.agreeId = agreeId;\n    this.owner = owner;\n    this.title = title;\n    this.msp = msp;\n    // this.starttime = formatetime;\n    this.endtime = endtime;\n    // this.release = released\n    // setAuctionId(agreeId);\n  }\n\n  // console.log('auctionId======', auctionId);\n\n  useEffect(() => {\n    getTotalNumOfAuction();\n    if (totalNumOfAuctions > 0) {\n      fetchAllAuctions();\n    }\n  }, [totalNumOfAuctions]);\n  useEffect(() => {\n    if (!walletConnected) {\n      web3ModalRef.current = new Web3Modal({\n        network: \"goerli\",\n        providerOptions: {},\n        disableInjectedProvider: false\n      });\n      connectWallet().then(async () => {\n        \"wallet connected\";\n      });\n    }\n  }, []);\n  const fetchAuctionById = async id => {\n    // console.log('erntered fetch by id', id);\n\n    try {\n      const provider = await getProviderOrSigner();\n      const escroContract = getAuctionContractInstance(provider);\n      let auction = await escroContract.auctions(id);\n      // console.log(auction)\n      const actn = new ParsedAgreement(id, auction.owner, auction.title, auction.msp.toNumber(), auction.starttime, auction.endtime);\n      setAuctionId(actn);\n      // console.log(actn, 'agreement by ID');\n      return actn;\n    } catch (error) {\n      console.log(error);\n    }\n    ;\n    console.log('auctionId======', auctionId);\n  };\n  const fetchAllAuctions = async () => {\n    try {\n      const allAuctions = [];\n      for (let i = 0; i < totalNumOfAuctions; i++) {\n        const auction = await fetchAuctionById(i);\n        allAuctions.push(auction);\n        //     if (agreement.clientAdd === clientAddress) {\n        //         allClientAgreements.push(agreement);\n\n        //     } else if (agreement.providerAdd === clientAddress) {\n        //         allProviderAgreements.push(agreement)\n        //     } else { }\n\n        //     console.log(agreement.clientAdd, 'agreement');\n        //     // allClientAgreements.push(agreement);\n        // }\n        // console.log(allClientAgreements, 'allClientAgreements')\n        // console.log(allProviderAgreements, 'allProviderAgreements')\n        // setEveryAgreementAsClient(allClientAgreements);\n        // setEveryAgreementAsServiceprovider(allProviderAgreements);\n      }\n\n      setEveryAuction(allAuctions);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  console.log('everyAuction==', everyAuction);\n  const getAuctionContractInstance = providerOrSigner => {\n    return new Contract(AUCTION_ESCROW_CONTRACT_ADDRESS, AUCTION_ESCROW_ABI, providerOrSigner);\n  };\n  const getTotalNumOfAuction = async () => {\n    const provider = await getProviderOrSigner();\n    const escroContract = getAuctionContractInstance(provider);\n    let agreement = await escroContract.numOfAuction();\n    setTotalNumOfAuctions(agreement.toNumber());\n    console.log(agreement, 'num of auction');\n  };\n\n  // console.log(StartAuction, '--StartAuction');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Auction by Dis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Owner : \", clientAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Highest Bid : \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n        children: \" Title of Auction : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => {\n          setTitle(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 53\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"lable\", {\n      children: \" MSP : \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      onChange: e => {\n        setMsp(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 36\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createAuction,\n          children: \"Create Auction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Created Auctions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }, this), everyAuction && everyAuction.map(evryauction => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginLeft: \"\",\n              marginTop: \"50px\",\n              border: \"1px solid grey\",\n              display: \"inline-block\",\n              padding: \"2% 5%\"\n            },\n            className: \"container offset-2 col-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Auction Id : \", evryauction.agreeId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Owner: \", evryauction.owner]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Start Time:\", evryauction.starttime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"End Time:\", evryauction.endtime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"auctionEndTime\",\n              children: \"Auction End Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"time\",\n              id: \"auctionEndTime\",\n              value: auctionEndTime,\n              onChange: e => setAuctionEndTime(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Title : \", evryauction.title]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"MSP : \", evryauction.msp / 1000000000000000000, \" Ether\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                style: {\n                  margin: \"20px\"\n                },\n                onClick: startAuction,\n                children: \"Start Auction\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                children: \"Participate in auction\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 33\n          }, this)\n        }, void 0, false);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true);\n}\n\n// From Chat GPT------------\n// function StartAuction({ auctionId, auctionEndTime }) {\n//     const [status, setStatus] = useState('');\n//     const provider = new ethers.providers.Web3Provider(window.ethereum);\n//     const signer = provider.getSigner();\n//     const contract = new ethers.Contract(contractAddress, ABI, signer);\n\n//     async function handleStartAuction() {\n//         try {\n//             const tx = await contract.startAuction(auctionId, auctionEndTime);\n//             await tx.wait();\n//             setStatus('Auction started successfully');\n//         } catch (err) {\n//             setStatus('Error starting auction: ' + err.message);\n//         }\n//     }\n\n//     return (\n//         <div>\n//             <button onClick={handleStartAuction}>Start Auction</button>\n//             <div>{status}</div>\n//         </div>\n//     );\n// }\n\n// 2nd try From Chat GPT------------------------------------\n\n// function StartAuction({ contract }) {\n//   const [auctionId, setAuctionId] = useState('');\n//   const [auctionEndTime, setAuctionEndTime] = useState('');\n\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n//     try {\n//       const tx = await contract.startAuction(auctionId, auctionEndTime);\n//       console.log(`Transaction hash: ${tx.hash}`);\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <label>\n//         Auction ID:\n//         <input\n//           type=\"text\"\n//           value={auctionId}\n//           onChange={e => setAuctionId(e.target.value)}\n//         />\n//       </label>\n//       <label>\n//         Auction End Time:\n//         <input\n//           type=\"text\"\n//           value={auctionEndTime}\n//           onChange={e => setAuctionEndTime(e.target.value)}\n//         />\n//       </label>\n//       <button type=\"submit\">Start Auction</button>\n//     </form>\n//   );\n// }\n\n// for smartcontract \n\n// pragma solidity ^0.8.0;\n\n// contract MultiAuction {\n//     struct Auction {\n//         address seller;\n//         address highestBidder;\n//         uint highestBid;\n//         uint startTime;\n//         uint endTime;\n//     }\n\n//     mapping (uint => Auction) public auctions;\n//     uint public auctionIndex;\n\n//     event NewAuction(uint auctionId);\n//     event BidPlaced(uint auctionId, address bidder, uint bid);\n//     event AuctionEnded(uint auctionId, address winner, uint finalBid);\n\n//     function createAuction(uint _startTime, uint _endTime) public {\n//         require(_startTime >= block.timestamp && _endTime > _startTime);\n//         auctionIndex++;\n//         auctions[auctionIndex] = Auction(msg.sender, address(0), 0, _startTime, _endTime);\n//         emit NewAuction(auctionIndex);\n//     }\n\n//     function bid(uint _auctionId, uint _bid) public {\n//         require(_auctionId <= auctionIndex && block.timestamp < auctions[_auctionId].endTime && _bid > auctions[_auctionId].highestBid);\n//         require(msg.sender != auctions[_auctionId].seller);\n//         auctions[_auctionId].highestBidder = msg.sender;\n//         auctions[_auctionId].highestBid = _bid;\n//         emit BidPlaced(_auctionId, msg.sender, _bid);\n//     }\n\n//     function endAuction(uint _auctionId) public {\n//         require(_auctionId <= auctionIndex && block.timestamp >= auctions[_auctionId].endTime);\n//         require(msg.sender == auctions[_auctionId].seller);\n//         emit AuctionEnded(_auctionId, auctions[_auctionId].highestBidder, auctions[_auctionId].highestBid);\n//     }\n// }\n_s(Auction, \"An7NCOLVA5cICoFbVvWIh0y9+yE=\");\n_c = Auction;\nvar _c;\n$RefreshReg$(_c, \"Auction\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Web3Modal","ethers","Contract","providers","Signer","AUCTION_ESCROW_CONTRACT_ADDRESS","AUCTION_ESCROW_ABI","moment","Auction","title","setTitle","clientAddress","setClientAddress","everyAuction","setEveryAuction","StartAuction","setStartAuction","auctionEndTime","setAuctionEndTime","error","setError","auctionId","setAuctionId","loading","setLoading","msp","setMsp","totalNumOfAuctions","setTotalNumOfAuctions","web3ModalRef","walletConnected","setWalletConnected","getProviderOrSigner","needSigner","provider","current","connect","web3Provider","Web3Provider","signerForUserAddress","getSigner","getAddress","chainId","getNetwork","window","alert","Error","signer","connectWallet","console","log","createAuction","escroContract","getAuctionContractInstance","tx","createAuctionContract","value","utils","parseEther","wait","handleSubmit","id","startAuction","hash","err","blockTimestamp","getBlockNumber","setTimeout","address","ParsedAgreement","agreeId","owner","starttime","endtime","getTotalNumOfAuction","fetchAllAuctions","network","providerOptions","disableInjectedProvider","then","fetchAuctionById","auction","auctions","actn","toNumber","allAuctions","i","push","providerOrSigner","agreement","numOfAuction","e","target","map","evryauction","marginLeft","marginTop","border","display","padding","margin"],"sources":["/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/Auction.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport Web3Modal from \"web3modal\";\nimport { ethers, Contract, providers, Signer } from 'ethers';\nimport { AUCTION_ESCROW_CONTRACT_ADDRESS, AUCTION_ESCROW_ABI } from './constant';\nimport moment from 'moment'\n\n\nexport default function Auction() {\n    // const formatetime = moment(time).unix\n\n    const [title, setTitle] = useState();\n    const [clientAddress, setClientAddress] = useState();\n    const [everyAuction, setEveryAuction] = useState([]);\n    const [StartAuction, setStartAuction] = useState();\n    const [auctionEndTime, setAuctionEndTime] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const [auctionId, setAuctionId] = useState();\n\n\n    const [loading, setLoading] = useState(false)\n    const [msp, setMsp] = useState(0);\n    const [totalNumOfAuctions, setTotalNumOfAuctions] = useState(0);\n\n\n\n    const web3ModalRef = useRef();\n\n    const [walletConnected, setWalletConnected] = useState(false);\n    const getProviderOrSigner = async (needSigner = false) => {\n        const provider = await web3ModalRef.current.connect();\n\n        const web3Provider = new providers.Web3Provider(provider);\n        // console.log((await userAddress).toLowerCase())\n        const signerForUserAddress = await web3Provider.getSigner();\n        const clientAddress = await signerForUserAddress.getAddress();\n        setClientAddress(clientAddress);\n        const { chainId } = await web3Provider.getNetwork();\n        if (chainId !== 5) {\n            window.alert(\"Please switch to the Goerli network!\");\n            throw new Error(\"Please switch to the Goerli network\");\n        }\n\n        if (needSigner) {\n            const signer = web3Provider.getSigner();\n            return signer;\n        }\n        return web3Provider;\n    }\n    // console.log('clientAddress:', clientAddress,); \n    const connectWallet = async () => {\n        try {\n            await getProviderOrSigner();\n            setWalletConnected(true);\n        } catch (error) {\n            console.log(error);\n\n        }\n    }\n\n    // Create Auction --------\n    const createAuction = async () => {\n        // Validate inputs\n        if (clientAddress == null || title == null || msp == null) {\n            alert('Please enter all required fields.');\n            return;\n        }\n\n        const signer = await getProviderOrSigner(true);\n\n        const escroContract = getAuctionContractInstance(signer);\n        console.log('clientAddress:', clientAddress);\n        // Send the transaction to create the escrow agreement\n        const tx = await escroContract.createAuctionContract(clientAddress, title, { value: ethers.utils.parseEther(msp) });\n\n        console.log('tx====', tx);\n        setLoading(true)\n        await tx.wait();\n        // setAuctionId('');\n        setMsp(0)\n        // Update the state to reflect the new escrow agreement\n        // setFundsReleased(false);\n\n        // getNumOfAgreements();\n        setLoading(false);\n        alert('Auction  created successfully.');\n        alert('MSP  deposited successfully.');\n    }\n\n    // This is second function for StartAuction(StartTime)\n    async function handleSubmit(id) {\n        console.log('id-----', id);\n        // alert('function called handlesubmit')\n        // e.preventDefault();\n        try {\n            const signer = await getProviderOrSigner(true);\n            const escroContract = getAuctionContractInstance(signer);\n            // let auction = await escroContract.auctions(id);\n            // console.log('==auction===', auction);\n            // const actn = new ParsedAgreement(id, auction.starttime);\n            // console.log('actn===', actn);\n\n            console.log('escroContract===', escroContract);\n\n            const tx = await escroContract.startAuction(auctionId, auctionEndTime);\n            console.log(`Transaction hash: ${tx.hash}`);\n            // return actn;\n        } catch (err) {\n            console.error(err, '--------------------');\n        }\n    }\n\n    const startAuction = async () => {\n        // console.log(id, '--id');\n        const signer = await getProviderOrSigner(true);\n\n\n        // async function handleStartAuction() {\n        //         try {\n        //             const tx = await contract.startAuction(auctionId, auctionEndTime);\n        //             await tx.wait();\n        //             setStatus('Auction started successfully');\n        //         } catch (err) {\n        //             setStatus('Error starting auction: ' + err.message);\n        //         }\n        //     }\n\n        const provider = await getProviderOrSigner();\n        const escroContract = getAuctionContractInstance(signer);\n        // Get the current block timestamp\n        const blockTimestamp = await provider.getBlockNumber(auctionId);\n        setTimeout(blockTimestamp);\n        console.log('blockTimestamp=>', blockTimestamp);\n        // const formatetime = moment(blockTimestamp).unix()\n        // console.log('formatetime::::',formatetime);\n\n        // Check if the user is the owner of the auction\n        // const owner = await contract.functions.auctions(auctionId).owner();\n        if (clientAddress !== signer.address) {\n            setError(\"You are not the owner of this auction\");\n            return;\n        }\n        // Check if the auction end time is valid\n        if (auctionEndTime <= blockTimestamp) {\n            setError(\"Invalid end time\");\n            return;\n        }\n\n        const tx = await escroContract.startAuction(auctionId, auctionEndTime);\n        setLoading(true);\n        console.log('tx', tx);\n\n        await tx.wait();\n        // setStartAuction()\n        setLoading(false);\n        setAuctionEndTime(\"\");\n        alert('Auction started...!!')\n\n        // let agreement = await escroContract.startAuction();\n        // setStartAuction(agreement.toNumber())\n        // console.log(agreement, 'num of auction');\n    }\n\n\n\n    function ParsedAgreement(agreeId, owner, title, msp, starttime, endtime) {\n        this.agreeId = agreeId;\n        this.owner = owner;\n        this.title = title;\n        this.msp = msp;\n        // this.starttime = formatetime;\n        this.endtime = endtime\n        // this.release = released\n        // setAuctionId(agreeId);\n    }\n\n    // console.log('auctionId======', auctionId);\n\n    useEffect(() => {\n        getTotalNumOfAuction();\n        if (totalNumOfAuctions > 0) {\n            fetchAllAuctions()\n        }\n    }, [totalNumOfAuctions])\n\n    useEffect(() => {\n\n        if (!walletConnected) {\n            web3ModalRef.current = new Web3Modal({\n                network: \"goerli\",\n                providerOptions: {},\n                disableInjectedProvider: false,\n            });\n            connectWallet().then(async () => {\n                \"wallet connected\"\n            })\n        }\n    }, []);\n\n    const fetchAuctionById = async (id) => {\n        // console.log('erntered fetch by id', id);\n\n        try {\n            const provider = await getProviderOrSigner();\n            const escroContract = getAuctionContractInstance(provider);\n            let auction = await escroContract.auctions(id);\n            // console.log(auction)\n            const actn = new ParsedAgreement(id, auction.owner, auction.title,\n                auction.msp.toNumber(), auction.starttime, auction.endtime)\n            setAuctionId(actn)\n            // console.log(actn, 'agreement by ID');\n            return actn;\n\n        } catch (error) {\n            console.log(error);\n        };\n        console.log('auctionId======', auctionId);\n\n    }\n\n\n\n    const fetchAllAuctions = async () => {\n\n        try {\n            const allAuctions = [];\n\n            for (let i = 0; i < totalNumOfAuctions; i++) {\n                const auction = await fetchAuctionById(i);\n\n                allAuctions.push(auction);\n                //     if (agreement.clientAdd === clientAddress) {\n                //         allClientAgreements.push(agreement);\n\n                //     } else if (agreement.providerAdd === clientAddress) {\n                //         allProviderAgreements.push(agreement)\n                //     } else { }\n\n                //     console.log(agreement.clientAdd, 'agreement');\n                //     // allClientAgreements.push(agreement);\n                // }\n                // console.log(allClientAgreements, 'allClientAgreements')\n                // console.log(allProviderAgreements, 'allProviderAgreements')\n                // setEveryAgreementAsClient(allClientAgreements);\n                // setEveryAgreementAsServiceprovider(allProviderAgreements);\n            }\n            setEveryAuction(allAuctions);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    console.log('everyAuction==', everyAuction);\n\n    const getAuctionContractInstance = (providerOrSigner) => {\n        return new Contract(\n            AUCTION_ESCROW_CONTRACT_ADDRESS,\n            AUCTION_ESCROW_ABI,\n            providerOrSigner\n        );\n    };\n\n    const getTotalNumOfAuction = async () => {\n        const provider = await getProviderOrSigner();\n        const escroContract = getAuctionContractInstance(provider);\n        let agreement = await escroContract.numOfAuction();\n        setTotalNumOfAuctions(agreement.toNumber())\n        console.log(agreement, 'num of auction');\n    }\n\n    // console.log(StartAuction, '--StartAuction');\n    return (\n        <>\n            <div>\n                <h1>\n                    Auction by Dis\n                </h1>\n            </div>\n            <div>Owner : {clientAddress}</div>\n            <div>Highest Bid : </div>\n            {/* 1)Create Auction */}\n            <div>\n                <lable> Title of Auction : </lable> <input type=\"text\"\n                    onChange={(e) => { setTitle(e.target.value) }}\n                />\n                {/* {console.log('title', title)} */}\n            </div>\n            <lable> MSP : </lable> <input type=\"number\"\n                onChange={(e) => { setMsp(e.target.value) }}\n            />\n            {/* {console.log('MSP', msp)} */}\n\n            <div>\n                {/* <lable> Add Bid : </lable> <input type=\"number\" /> */}\n                <div> <button onClick={createAuction}>Create Auction</button></div>\n            </div>\n            <div>\n                <h2>Created Auctions</h2>\n                {\n                    everyAuction && everyAuction.map((evryauction) => {\n                        return (\n                            <>\n                                <div style={{ marginLeft: \"\", marginTop: \"50px\", border: \"1px solid grey\", display: \"inline-block\", padding: \"2% 5%\" }} className='container offset-2 col-5'>\n\n                                    <p>Auction Id : {evryauction.agreeId}</p>\n                                    <p>Owner: {evryauction.owner}</p>\n                                    <p>Start Time:{evryauction.starttime}</p>\n                                    <p>End Time:{evryauction.endtime}</p>\n                                    <label htmlFor=\"auctionEndTime\">Auction End Time:</label>\n                                    <input\n                                        type=\"time\"\n                                        id=\"auctionEndTime\"\n                                        value={auctionEndTime}\n                                        onChange={(e) => setAuctionEndTime(e.target.value)}\n                                    />\n\n\n                                    <h3>Title : {evryauction.title}</h3>\n                                    <h4>MSP : {evryauction.msp / 1000000000000000000} Ether</h4>\n                                    <div >\n                                        <button style={{ margin: \"20px\" }}\n                                            onClick={startAuction}\n                                        >Start Auction</button>\n\n                                        <button>Participate in auction</button>\n\n                                    </div>\n\n                                </div>\n                            </>\n                        )\n                    })\n                }\n            </div>\n            {error && <p>{error}</p>}\n\n        </>\n\n    )\n}\n\n// From Chat GPT------------\n// function StartAuction({ auctionId, auctionEndTime }) {\n//     const [status, setStatus] = useState('');\n//     const provider = new ethers.providers.Web3Provider(window.ethereum);\n//     const signer = provider.getSigner();\n//     const contract = new ethers.Contract(contractAddress, ABI, signer);\n\n//     async function handleStartAuction() {\n//         try {\n//             const tx = await contract.startAuction(auctionId, auctionEndTime);\n//             await tx.wait();\n//             setStatus('Auction started successfully');\n//         } catch (err) {\n//             setStatus('Error starting auction: ' + err.message);\n//         }\n//     }\n\n//     return (\n//         <div>\n//             <button onClick={handleStartAuction}>Start Auction</button>\n//             <div>{status}</div>\n//         </div>\n//     );\n// }\n\n\n\n// 2nd try From Chat GPT------------------------------------\n\n\n// function StartAuction({ contract }) {\n//   const [auctionId, setAuctionId] = useState('');\n//   const [auctionEndTime, setAuctionEndTime] = useState('');\n\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n//     try {\n//       const tx = await contract.startAuction(auctionId, auctionEndTime);\n//       console.log(`Transaction hash: ${tx.hash}`);\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <label>\n//         Auction ID:\n//         <input\n//           type=\"text\"\n//           value={auctionId}\n//           onChange={e => setAuctionId(e.target.value)}\n//         />\n//       </label>\n//       <label>\n//         Auction End Time:\n//         <input\n//           type=\"text\"\n//           value={auctionEndTime}\n//           onChange={e => setAuctionEndTime(e.target.value)}\n//         />\n//       </label>\n//       <button type=\"submit\">Start Auction</button>\n//     </form>\n//   );\n// }\n\n\n// for smartcontract \n\n// pragma solidity ^0.8.0;\n\n// contract MultiAuction {\n//     struct Auction {\n//         address seller;\n//         address highestBidder;\n//         uint highestBid;\n//         uint startTime;\n//         uint endTime;\n//     }\n\n//     mapping (uint => Auction) public auctions;\n//     uint public auctionIndex;\n\n//     event NewAuction(uint auctionId);\n//     event BidPlaced(uint auctionId, address bidder, uint bid);\n//     event AuctionEnded(uint auctionId, address winner, uint finalBid);\n\n//     function createAuction(uint _startTime, uint _endTime) public {\n//         require(_startTime >= block.timestamp && _endTime > _startTime);\n//         auctionIndex++;\n//         auctions[auctionIndex] = Auction(msg.sender, address(0), 0, _startTime, _endTime);\n//         emit NewAuction(auctionIndex);\n//     }\n\n//     function bid(uint _auctionId, uint _bid) public {\n//         require(_auctionId <= auctionIndex && block.timestamp < auctions[_auctionId].endTime && _bid > auctions[_auctionId].highestBid);\n//         require(msg.sender != auctions[_auctionId].seller);\n//         auctions[_auctionId].highestBidder = msg.sender;\n//         auctions[_auctionId].highestBid = _bid;\n//         emit BidPlaced(_auctionId, msg.sender, _bid);\n//     }\n\n//     function endAuction(uint _auctionId) public {\n//         require(_auctionId <= auctionIndex && block.timestamp >= auctions[_auctionId].endTime);\n//         require(msg.sender == auctions[_auctionId].seller);\n//         emit AuctionEnded(_auctionId, auctions[_auctionId].highestBidder, auctions[_auctionId].highestBid);\n//     }\n// }\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}