[{"/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/index.js":"1","/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/reportWebVitals.js":"2","/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/App.js":"3","/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/Auction.js":"4","/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/constant.js":"5"},{"size":535,"mtime":1674035899053,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1674035899057,"results":"8","hashOfConfig":"7"},{"size":196,"mtime":1674036727198,"results":"9","hashOfConfig":"7"},{"size":13685,"mtime":1674459647393,"results":"10","hashOfConfig":"7"},{"size":3420,"mtime":1674274935491,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1v9coqr",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"15"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/index.js",[],[],[],"/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/reportWebVitals.js",[],[],"/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/App.js",["30"],[],"import logo from './logo.svg';\nimport './App.css';\nimport Auction from './Auction';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Auction />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/Auction.js",["31","32","33","34","35"],[],"import React, { useEffect, useRef, useState } from 'react';\n\nimport Web3Modal from \"web3modal\";\nimport { ethers, Contract, providers, Signer } from 'ethers';\nimport { AUCTION_ESCROW_CONTRACT_ADDRESS, AUCTION_ESCROW_ABI } from './constant';\nimport moment from 'moment'\n\n\nexport default function Auction() {\n\n\n    const [title, setTitle] = useState();\n    const [clientAddress, setClientAddress] = useState();\n    const [everyAuction, setEveryAuction] = useState([]);\n    const [StartAuction, setStartAuction] = useState();\n    const [auctionEndTime, setAuctionEndTime] = useState(\"\");\n    const [error, setError] = useState(\"\");\n\n\n    const [loading, setLoading] = useState(false)\n    const [msp, setMsp] = useState(0);\n    const [totalNumOfAuctions, setTotalNumOfAuctions] = useState(0);\n\n\n\n    const web3ModalRef = useRef();\n\n    const [walletConnected, setWalletConnected] = useState(false);\n    const getProviderOrSigner = async (needSigner = false) => {\n        const provider = await web3ModalRef.current.connect();\n\n        const web3Provider = new providers.Web3Provider(provider);\n        // console.log((await userAddress).toLowerCase())\n        const signerForUserAddress = await web3Provider.getSigner();\n        const clientAddress = await signerForUserAddress.getAddress();\n        setClientAddress(clientAddress);\n        const { chainId } = await web3Provider.getNetwork();\n        if (chainId !== 5) {\n            window.alert(\"Please switch to the Goerli network!\");\n            throw new Error(\"Please switch to the Goerli network\");\n        }\n\n        if (needSigner) {\n            const signer = web3Provider.getSigner();\n            return signer;\n        }\n        return web3Provider;\n    }\n    // console.log('clientAddress:', clientAddress,); \n    const connectWallet = async () => {\n        try {\n            await getProviderOrSigner();\n            setWalletConnected(true);\n        } catch (error) {\n            console.log(error);\n\n        }\n    }\n\n    // Create Auction --------\n    const createAuction = async () => {\n        // Validate inputs\n        if (clientAddress == null || title == null || msp == null) {\n            alert('Please enter all required fields.');\n            return;\n        }\n\n        const signer = await getProviderOrSigner(true);\n\n        const escroContract = getAuctionContractInstance(signer);\n        console.log('clientAddress:', clientAddress);\n        // Send the transaction to create the escrow agreement\n        const tx = await escroContract.createAuctionContract(clientAddress, title, { value: ethers.utils.parseEther(msp) });\n\n        console.log('tx====', tx);\n        setLoading(true)\n        await tx.wait();\n        // setAuctionId('');\n        setMsp(0)\n        // Update the state to reflect the new escrow agreement\n        // setFundsReleased(false);\n\n        // getNumOfAgreements();\n        setLoading(false);\n        alert('Auction  created successfully.');\n        alert('MSP  deposited successfully.');\n    }\n\n    // This is second function for StartAuction(StartTime)\n    async function handleSubmit(id) {\n        console.log('id-----', id);\n        // alert('function called handlesubmit')\n        // e.preventDefault();\n        try {\n            const signer = await getProviderOrSigner(true);\n            const escroContract = getAuctionContractInstance(signer);\n            let auction = await escroContract.auctions(id);\n            console.log('==auction===',auction);\n            const actn = new ParsedAgreement(id, auction.starttime);\n            console.log('actn===', actn);\n\n            console.log('escroContract===', escroContract);\n\n            const tx = await escroContract.startAuction(clientAddress, auctionEndTime);\n            console.log(`Transaction hash: ${tx.hash}`);\n            return actn;\n        } catch (err) {\n            console.error(err, '--------------------');\n        }\n    }\n\n    const startAuction = async (id) => {\n        console.log(id, '--id');\n        const signer = await getProviderOrSigner(true);\n\n\n        // async function handleStartAuction() {\n        //         try {\n        //             const tx = await contract.startAuction(auctionId, auctionEndTime);\n        //             await tx.wait();\n        //             setStatus('Auction started successfully');\n        //         } catch (err) {\n        //             setStatus('Error starting auction: ' + err.message);\n        //         }\n        //     }\n\n        const provider = await getProviderOrSigner();\n        const escroContract = getAuctionContractInstance(signer);\n        // Get the current block timestamp\n        const blockTimestamp = await provider.getBlockNumber(id);\n        console.log('blockTimestamp=>', blockTimestamp);\n        // Check if the user is the owner of the auction\n        // const owner = await contract.functions.auctions(auctionId).owner();\n        if (clientAddress !== signer.address) {\n            setError(\"You are not the owner of this auction\");\n            return;\n        }\n        // Check if the auction end time is valid\n        if (auctionEndTime <= blockTimestamp) {\n            setError(\"Invalid end time\");\n            return;\n        }\n\n        const tx = await escroContract.startAuction(clientAddress, auctionEndTime);\n        setLoading(true);\n        console.log('tx', tx);\n\n        await tx.wait();\n        setStartAuction()\n        setLoading(false);\n        setAuctionEndTime(\"\");\n        alert('Auction started...!!')\n\n        // let agreement = await escroContract.startAuction();\n        // setStartAuction(agreement.toNumber())\n        // console.log(agreement, 'num of auction');\n    }\n    function ParsedAgreement(agreeId, owner, title, msp, starttime, endtime) {\n        this.agreeId = agreeId;\n        this.owner = owner;\n        this.title = title;\n        this.msp = msp;\n        this.starttime = moment().format('LTS');  // 5:02:17 PM\n        ;\n        this.endtime = endtime\n        // this.release = released\n    }\n\n    useEffect(() => {\n        getTotalNumOfAuction();\n        if (totalNumOfAuctions > 0) {\n            fetchAllAuctions()\n        }\n    }, [totalNumOfAuctions])\n\n    useEffect(() => {\n\n        if (!walletConnected) {\n            web3ModalRef.current = new Web3Modal({\n                network: \"goerli\",\n                providerOptions: {},\n                disableInjectedProvider: false,\n            });\n            connectWallet().then(async () => {\n                \"wallet connected\"\n            })\n        }\n    }, []);\n\n    const fetchAuctionById = async (id) => {\n        // console.log('erntered fetch by id', id);\n\n        try {\n            const provider = await getProviderOrSigner();\n            const escroContract = getAuctionContractInstance(provider);\n            let auction = await escroContract.auctions(id);\n            // console.log(auction)\n            const actn = new ParsedAgreement(id, auction.owner, auction.title,\n                auction.msp.toNumber(), auction.starttime, auction.endtime)\n\n            // console.log(actn, 'agreement by ID');\n            return actn;\n\n        } catch (error) {\n            console.log(error);\n        };\n    }\n\n\n\n    const fetchAllAuctions = async () => {\n\n        try {\n            const allAuctions = [];\n\n            for (let i = 0; i < totalNumOfAuctions; i++) {\n                const auction = await fetchAuctionById(i);\n\n                allAuctions.push(auction);\n                //     if (agreement.clientAdd === clientAddress) {\n                //         allClientAgreements.push(agreement);\n\n                //     } else if (agreement.providerAdd === clientAddress) {\n                //         allProviderAgreements.push(agreement)\n                //     } else { }\n\n                //     console.log(agreement.clientAdd, 'agreement');\n                //     // allClientAgreements.push(agreement);\n                // }\n                // console.log(allClientAgreements, 'allClientAgreements')\n                // console.log(allProviderAgreements, 'allProviderAgreements')\n                // setEveryAgreementAsClient(allClientAgreements);\n                // setEveryAgreementAsServiceprovider(allProviderAgreements);\n            }\n            setEveryAuction(allAuctions);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    console.log('everyAuction==', everyAuction);\n\n    const getAuctionContractInstance = (providerOrSigner) => {\n        return new Contract(\n            AUCTION_ESCROW_CONTRACT_ADDRESS,\n            AUCTION_ESCROW_ABI,\n            providerOrSigner\n        );\n    };\n\n    const getTotalNumOfAuction = async () => {\n        const provider = await getProviderOrSigner();\n        const escroContract = getAuctionContractInstance(provider);\n        let agreement = await escroContract.numOfAuction();\n        setTotalNumOfAuctions(agreement.toNumber())\n        console.log(agreement, 'num of auction');\n    }\n \n    console.log(StartAuction, '--StartAuction');\n    return (\n        <>\n            <div>\n                <h1>\n                    Auction by Dis\n                </h1>\n            </div>\n            <div>Owner : {clientAddress}</div>\n            <div>Highest Bid : </div>\n            {/* 1)Create Auction */}\n            <div>\n                <lable> Title of Auction : </lable> <input type=\"text\"\n                    onChange={(e) => { setTitle(e.target.value) }}\n                />\n                {/* {console.log('title', title)} */}\n            </div>\n            <lable> MSP : </lable> <input type=\"number\"\n                onChange={(e) => { setMsp(e.target.value) }}\n            />\n            {/* {console.log('MSP', msp)} */}\n\n            <div>\n                {/* <lable> Add Bid : </lable> <input type=\"number\" /> */}\n                <div> <button onClick={createAuction}>Create Auction</button></div>\n            </div>\n            <div>\n                <h2>Created Auctions</h2>\n                {\n                    everyAuction && everyAuction.map((evryauction) => {\n                        return (\n                            <>\n                                <div style={{ marginLeft: \"\", marginTop: \"50px\", border: \"1px solid grey\", display: \"inline-block\", padding: \"2% 5%\" }} className='container offset-2 col-5'>\n\n                                    <p>Agreement Id : {evryauction.agreeId}</p>\n                                    <p>Owner: {evryauction.owner}</p>\n                                    <p>Start Time:{evryauction.starttime}</p>\n                                    <p>End Time:{evryauction.endtime}</p>\n                                    <label htmlFor=\"auctionEndTime\">Auction End Time:</label>\n                                    <input\n                                        type=\"time\"\n                                        id=\"auctionEndTime\"\n                                        value={auctionEndTime}\n                                        onChange={(e) => setAuctionEndTime(e.target.value)}\n                                    />\n\n\n                                    <h3>Title : {evryauction.title}</h3>\n                                    <h4>MSP : {evryauction.msp / 1000000000000000000} Ether</h4>\n                                    <div >\n                                        <button style={{ margin: \"20px\" }}\n                                            onClick={handleSubmit}\n                                        >Start Auction</button>\n\n                                        <button>Participate in auction</button>\n\n                                    </div>\n\n                                </div>\n                            </>\n                        )\n                    })\n                }\n            </div>\n            {error && <p>{error}</p>}\n\n        </>\n\n    )\n}\n\n// From Chat GPT------------\n// function StartAuction({ auctionId, auctionEndTime }) {\n//     const [status, setStatus] = useState('');\n//     const provider = new ethers.providers.Web3Provider(window.ethereum);\n//     const signer = provider.getSigner();\n//     const contract = new ethers.Contract(contractAddress, ABI, signer);\n\n//     async function handleStartAuction() {\n//         try {\n//             const tx = await contract.startAuction(auctionId, auctionEndTime);\n//             await tx.wait();\n//             setStatus('Auction started successfully');\n//         } catch (err) {\n//             setStatus('Error starting auction: ' + err.message);\n//         }\n//     }\n\n//     return (\n//         <div>\n//             <button onClick={handleStartAuction}>Start Auction</button>\n//             <div>{status}</div>\n//         </div>\n//     );\n// }\n\n\n\n// 2nd try From Chat GPT------------------------------------\n\n\n// function StartAuction({ contract }) {\n//   const [auctionId, setAuctionId] = useState('');\n//   const [auctionEndTime, setAuctionEndTime] = useState('');\n\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n//     try {\n//       const tx = await contract.startAuction(auctionId, auctionEndTime);\n//       console.log(`Transaction hash: ${tx.hash}`);\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <label>\n//         Auction ID:\n//         <input\n//           type=\"text\"\n//           value={auctionId}\n//           onChange={e => setAuctionId(e.target.value)}\n//         />\n//       </label>\n//       <label>\n//         Auction End Time:\n//         <input\n//           type=\"text\"\n//           value={auctionEndTime}\n//           onChange={e => setAuctionEndTime(e.target.value)}\n//         />\n//       </label>\n//       <button type=\"submit\">Start Auction</button>\n//     </form>\n//   );\n// }\n","/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/constant.js",[],[],{"ruleId":"36","severity":1,"message":"37","line":1,"column":8,"nodeType":"38","messageId":"39","endLine":1,"endColumn":12},{"ruleId":"36","severity":1,"message":"40","line":4,"column":39,"nodeType":"38","messageId":"39","endLine":4,"endColumn":45},{"ruleId":"36","severity":1,"message":"41","line":20,"column":12,"nodeType":"38","messageId":"39","endLine":20,"endColumn":19},{"ruleId":"36","severity":1,"message":"42","line":112,"column":11,"nodeType":"38","messageId":"39","endLine":112,"endColumn":23},{"ruleId":"43","severity":1,"message":"44","line":174,"column":8,"nodeType":"45","endLine":174,"endColumn":28,"suggestions":"46"},{"ruleId":"43","severity":1,"message":"47","line":188,"column":8,"nodeType":"45","endLine":188,"endColumn":10,"suggestions":"48"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Signer' is defined but never used.","'loading' is assigned a value but never used.","'startAuction' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchAllAuctions' and 'getTotalNumOfAuction'. Either include them or remove the dependency array.","ArrayExpression",["49"],"React Hook useEffect has missing dependencies: 'connectWallet' and 'walletConnected'. Either include them or remove the dependency array.",["50"],{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},"Update the dependencies array to be: [fetchAllAuctions, getTotalNumOfAuction, totalNumOfAuctions]",{"range":"55","text":"56"},"Update the dependencies array to be: [connectWallet, walletConnected]",{"range":"57","text":"58"},[6125,6145],"[fetchAllAuctions, getTotalNumOfAuction, totalNumOfAuctions]",[6504,6506],"[connectWallet, walletConnected]"]