[{"/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/index.js":"1","/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/reportWebVitals.js":"2","/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/App.js":"3","/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/Auction.js":"4","/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/constant.js":"5"},{"size":535,"mtime":1674035899053,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1674035899057,"results":"8","hashOfConfig":"7"},{"size":196,"mtime":1674036727198,"results":"9","hashOfConfig":"7"},{"size":13903,"mtime":1675369180963,"results":"10","hashOfConfig":"7"},{"size":4710,"mtime":1675364367987,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1v9coqr",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"15"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/index.js",[],[],[],"/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/reportWebVitals.js",[],[],"/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/App.js",["31"],[],"import logo from './logo.svg';\nimport './App.css';\nimport Auction from './Auction';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Auction />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/Auction.js",["32","33","34","35","36","37","38","39","40","41","42"],[],"import React, { useEffect, useRef, useState } from 'react';\nimport Web3Modal from \"web3modal\";\nimport { ethers, Contract, providers, Signer } from 'ethers';\nimport { AUCTION_ESCROW_CONTRACT_ADDRESS, AUCTION_ESCROW_ABI } from './constant';\nimport moment from 'moment'\nexport default function Auction() {\n    const [title, setTitle] = useState();\n    const [clientAddress, setClientAddress] = useState();\n    const [everyAuction, setEveryAuction] = useState([]);\n    const [StartAuction, setStartAuction] = useState();\n    const [auctionEndTime, setAuctionEndTime] = useState();\n    const [highestbid, sethighestBid] = useState()\n    const [bid, setBid] = useState();\n    // console.log(auctionEndTime);\n    const [error, setError] = useState(\"\");\n    const [loading, setLoading] = useState(false)\n    const [msp, setMsp] = useState(0);\n    const [totalNumOfAuctions, setTotalNumOfAuctions] = useState(0);\n    const web3ModalRef = useRef();\n    const [walletConnected, setWalletConnected] = useState(false);\n    const getProviderOrSigner = async (needSigner = false) => {\n        const provider = await web3ModalRef.current.connect();\n        const web3Provider = new providers.Web3Provider(provider);\n        // console.log((await userAddress).toLowerCase())\n        const signerForUserAddress = await web3Provider.getSigner();\n        const clientAddress = await signerForUserAddress.getAddress();\n        setClientAddress(clientAddress);\n        const { chainId } = await web3Provider.getNetwork();\n        if (chainId !== 5) {\n            window.alert(\"Please switch to the Goerli network!\");\n            throw new Error(\"Please switch to the Goerli network\");\n        }\n        if (needSigner) {\n            const signer = web3Provider.getSigner();\n            return signer;\n        }\n        return web3Provider;\n    }\n    // console.log('clientAddress:', clientAddress,); \n    const connectWallet = async () => {\n        try {\n            await getProviderOrSigner();\n            setWalletConnected(true);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    // Create Auction --------\n    const createAuction = async () => {\n        // Validate inputs\n        if (clientAddress == null || title == null || msp == null) {\n            alert('Please enter all required fields.');\n            return;\n        }\n        const signer = await getProviderOrSigner(true);\n        const escroContract = getAuctionContractInstance(signer);\n        // console.log('clientAddress:', clientAddress);\n        // Send the transaction to create the escrow agreement\n        const tx = await escroContract.createAuctionContract(clientAddress, title, { value: ethers.utils.parseEther(msp) });\n        // console.log('tx====', tx);\n        setLoading(true)\n        await tx.wait();\n        // setAuctionId('');\n        setMsp(0)\n        setLoading(false);\n        alert('Auction  created successfully.');\n        alert('MSP  deposited successfully.');\n    }\n    const startAuction = async (_id, _endTime) => {\n        console.log('_id----', _id);\n        const signer = await getProviderOrSigner(true);\n        const auctionContract = getAuctionContractInstance(signer);\n        const tx = await auctionContract.startAuction(_id, auctionEndTime);\n        await tx.wait();\n        alert('Auction  Started!!');\n    }\n    function getReadableTime(mili) {\n        if (mili > 0) {\n            let date = new Date(mili * 1000);\n            let time = date.toLocaleString();\n            return time;\n        } else {\n            return null;\n        }\n    }\n    async function getUinxTime(time) {\n        console.log();\n        // e.preventDefault();\n        let timestamp = await moment(time, \"HH:mm\").unix();\n        // console.log(timestamp)\n        setAuctionEndTime(timestamp);\n    }\n    async function startAuct(id) {\n        await startAuction(id, auctionEndTime);\n    }\n    function ParsedAgreement(_agreeId, _owner, _title, _msp, _starttime, _endtime, _highestBidder, _highestBid, _auctionend, _allBidders, _allBid) {\n        this.agreeId = _agreeId;\n        this.owner = _owner;\n        this.title = _title;\n        this.msp = _msp;\n        this.starttime = getReadableTime(_starttime);\n        this.endtime = getReadableTime(_endtime);\n        this.highestBidder = _highestBidder;\n        this.highestBid = _highestBid;\n        this.auctionEnd = _auctionend;\n        this.allBidders = _allBidders;\n        this.allBid = _allBid;\n\n\n        // this.release = released\n    }\n    useEffect(() => {\n        getTotalNumOfAuction();\n        if (totalNumOfAuctions > 0) {\n            fetchAllAuctions()\n            // GetHighestBid();\n        }\n    }, [totalNumOfAuctions])\n    useEffect(() => {\n        if (!walletConnected) {\n            web3ModalRef.current = new Web3Modal({\n                network: \"goerli\",\n                providerOptions: {},\n                disableInjectedProvider: false,\n            });\n            connectWallet().then(async () => {\n                \"wallet connected\"\n            })\n        }\n    }, []);\n    const fetchAuctionById = async (id) => {\n        // console.log('erntered fetch by id', id);\n        try {\n            const provider = await getProviderOrSigner();\n            const escroContract = getAuctionContractInstance(provider);\n            let auction = await escroContract.auctions(id);\n            let allbiders = await escroContract.getBidders(id);\n            console.log('allbiders--', allbiders.length);\n\n            let allBidsAndBiddersArr = [];\n            for (let i = 0; i < allbiders.length; i++) {\n                let bid = await escroContract.getBids(id, allbiders[i]);\n                console.log('fdsfdsfsgs', [{ [allbiders[i]]: bid }]);\n                allBidsAndBiddersArr.push({ [allbiders[i]]: bid.toNumber() / 1000000000000000000 })\n\n            }\n            const actn = new ParsedAgreement(id, auction.owner, auction.title,\n                auction.msp.toNumber(), auction.auctionStartTime.toNumber(), auction.auctionEndTime.toNumber(), auction.highestBidder, auction.highestBid.toNumber() / 1000000000000000000, auction.auctionEnd, allbiders, allBidsAndBiddersArr)\n            console.log('actn--', actn);\n            return actn;\n\n        } catch (error) {\n            console.log(error);\n        };\n    }\n\n\n    const fetchAllAuctions = async () => {\n        try {\n            const allAuctions = [];\n            for (let i = 0; i < totalNumOfAuctions; i++) {\n                const auction = await fetchAuctionById(i);\n                // console.log('auction..', auction);\n                allAuctions.push(auction);\n            }\n            // console.log(allAuctions);\n            setEveryAuction(allAuctions);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    const getAuctionContractInstance = (providerOrSigner) => {\n        return new Contract(\n            AUCTION_ESCROW_CONTRACT_ADDRESS,\n            AUCTION_ESCROW_ABI,\n            providerOrSigner\n        );\n    };\n    const getTotalNumOfAuction = async () => {\n        const provider = await getProviderOrSigner();\n        const escroContract = getAuctionContractInstance(provider);\n        let agreement = await escroContract.numOfAuction();\n        setTotalNumOfAuctions(agreement.toNumber())\n        // console.log(agreement, 'num of auction');\n    }\n    // console.log(StartAuction, '--StartAuction');\n    const makeAbid = async (id) => {\n        const signer = await getProviderOrSigner(true);\n        const escroContract = getAuctionContractInstance(signer);\n        let tx = await escroContract.bid(id, { value: ethers.utils.parseEther(bid) });\n\n        setLoading(true);\n        await tx.wait();\n\n        alert('You have made a Bid');\n        setLoading(false)\n\n    }\n\n    const ReleaseFunds = async (id) => {\n\n        const signer = await getProviderOrSigner(true);\n        const escroContract = getAuctionContractInstance(signer);\n        let tx = await escroContract.releaseFunds(id);\n\n        setLoading(true);\n        await tx.wait();\n\n        alert('Relese Funds successfully!!!!');\n        setLoading(false)\n    }\n\n    const GetBidders = async (id) => {\n        const signer = await getProviderOrSigner(true);\n        const escroContract = getAuctionContractInstance(signer);\n        let tx = await escroContract.getBidders(id);\n\n        setLoading(true);\n        await tx.wait();\n\n        alert('GetBidders....!!!');\n        setLoading(false)\n    }\n\n    return (\n        <>\n            <div>\n                <h1>Auction by Ids</h1>\n            </div>\n            <div>Curruent user : {clientAddress}\n            </div>\n            {/* <div>Highest Bid : </div> */}\n            {/* 1)Create Auction */}\n            <div>\n                <lable> Title of Auction : </lable>\n                <input type=\"text\"\n                    onChange={(e) => { setTitle(e.target.value) }}\n                />\n                {/* {console.log('title', title)} */}\n            </div>\n            <lable> MSP : </lable>\n            <input type=\"number\"\n                onChange={(e) => { setMsp(e.target.value) }}\n            />\n            {/* {console.log('MSP', msp)} */}\n            <div>\n                {/* <lable> Add Bid : </lable> <input type=\"number\" /> */}\n                <div> <button onClick={createAuction}>Create Auction</button></div>\n            </div>\n            <div>\n                <h2>Created Auctions</h2>                {\n                    everyAuction && everyAuction.map((evryauction) => {\n                        return (\n                            <>                                <div style={{ marginLeft: \"\", marginTop: \"50px\", border: \"1px solid grey\", display: \"inline-block\", padding: \"2% 5%\" }} className='container offset-2 col-5'>\n                                <p>Agreement Id : {evryauction?.agreeId}</p>\n                                <p>Owner: {evryauction?.owner}</p>\n                                <p>Start Time:{evryauction?.starttime}\n                                </p>\n                                <p>End Time:{evryauction?.endtime}\n                                </p>\n                                {\n                                    evryauction?.endtime ? <div>\n                                        <button onClick={() => ReleaseFunds(evryauction?.agreeId)}>Relese Funds</button>\n\n                                    </div> :\n                                        <div>\n                                            <label htmlFor=\"auctionEndTime\">Auction End Time:</label>\n                                            <input\n                                                type=\"time\"\n                                                onChange={(e) =>                                            // setAuctionEndTime(e.target.value)\n                                                    getUinxTime(e.target.value)\n                                                }\n                                            />\n                                        </div>\n                                }\n\n\n                                <h3>Title : {evryauction?.title}</h3>\n                                <h4>MSP : {evryauction?.msp / 1000000000000000000} Ether</h4>                                    <div>\n                                    <button style={{ margin: \"20px\" }}\n                                        onClick={() => startAuction(evryauction?.agreeId)}\n                                    >Start Auction\n                                    </button>\n\n                                    <h4>Highest Bidder = {evryauction?.highestBidder}</h4>\n                                    <h4>Highest Bid = {evryauction.highestBid} </h4>\n                                    <div>\n                                        <h1>All bidders </h1>\n                                        {\n                                            <ul>\n                                                {\n                                                    evryauction.allBid.map((bid) => (\n                                                        <li>\n                                                            {\n                                                                Object.entries(bid).map(([key, value]) => (\n                                                                    <p>{key}: {value}</p>\n                                                                ))\n                                                            }\n                                                        </li>\n                                                    ))\n                                                }\n                                            </ul>\n                                        }\n                                    </div>\n\n                                    <div>\n                                        <label>Bid:</label>\n                                        <input type=\"number\"\n                                            onChange={(e) => setBid(e.target.value)}\n                                        />\n                                        {console.log('bid,', bid)}\n                                        <button\n                                            onClick={() => makeAbid(evryauction?.agreeId)}\n                                        >Make a Bid</button>\n                                    </div>\n                                    {/* ) \n                                            : <lable>Auction is not started yet!!!!</lable> */}\n                                    {/* } */}\n                                </div>\n\n\n                            </div>\n                                {/* <h2>{console.log('listofbids',listofbids)}\n                                </h2> */}\n                            </>\n                        )\n                    })\n                }\n            </div>\n            {error && <p>{error}</p>}\n        </>)\n}","/Users/jaydippatel/Disha CC/Auction_With_Cryptodevtoken/my-app/src/constant.js",[],[],[],{"ruleId":"43","severity":1,"message":"44","line":1,"column":8,"nodeType":"45","messageId":"46","endLine":1,"endColumn":12},{"ruleId":"43","severity":1,"message":"47","line":3,"column":39,"nodeType":"45","messageId":"46","endLine":3,"endColumn":45},{"ruleId":"43","severity":1,"message":"48","line":10,"column":12,"nodeType":"45","messageId":"46","endLine":10,"endColumn":24},{"ruleId":"43","severity":1,"message":"49","line":10,"column":26,"nodeType":"45","messageId":"46","endLine":10,"endColumn":41},{"ruleId":"43","severity":1,"message":"50","line":12,"column":12,"nodeType":"45","messageId":"46","endLine":12,"endColumn":22},{"ruleId":"43","severity":1,"message":"51","line":12,"column":24,"nodeType":"45","messageId":"46","endLine":12,"endColumn":37},{"ruleId":"43","severity":1,"message":"52","line":15,"column":19,"nodeType":"45","messageId":"46","endLine":15,"endColumn":27},{"ruleId":"43","severity":1,"message":"53","line":16,"column":12,"nodeType":"45","messageId":"46","endLine":16,"endColumn":19},{"ruleId":"43","severity":1,"message":"54","line":93,"column":20,"nodeType":"45","messageId":"46","endLine":93,"endColumn":29},{"ruleId":"55","severity":1,"message":"56","line":118,"column":8,"nodeType":"57","endLine":118,"endColumn":28,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"59","line":130,"column":8,"nodeType":"57","endLine":130,"endColumn":10,"suggestions":"60"},{"ruleId":"43","severity":1,"message":"61","line":213,"column":11,"nodeType":"45","messageId":"46","endLine":213,"endColumn":21},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Signer' is defined but never used.","'StartAuction' is assigned a value but never used.","'setStartAuction' is assigned a value but never used.","'highestbid' is assigned a value but never used.","'sethighestBid' is assigned a value but never used.","'setError' is assigned a value but never used.","'loading' is assigned a value but never used.","'startAuct' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchAllAuctions' and 'getTotalNumOfAuction'. Either include them or remove the dependency array.","ArrayExpression",["62"],"React Hook useEffect has missing dependencies: 'connectWallet' and 'walletConnected'. Either include them or remove the dependency array.",["63"],"'GetBidders' is assigned a value but never used.",{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},"Update the dependencies array to be: [fetchAllAuctions, getTotalNumOfAuction, totalNumOfAuctions]",{"range":"68","text":"69"},"Update the dependencies array to be: [connectWallet, walletConnected]",{"range":"70","text":"71"},[4660,4680],"[fetchAllAuctions, getTotalNumOfAuction, totalNumOfAuctions]",[5037,5039],"[connectWallet, walletConnected]"]